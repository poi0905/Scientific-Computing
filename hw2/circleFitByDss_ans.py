'''
def circleFitByDss(data):
    from scipy import optimize
'''

from scipy import optimize

x = [float(val) for val in input().split()]
y = [float(val) for val in input().split()]

def f1(a, x, y):
    d = 0
    for i in range(len(x)):
        d += abs(((x[i]**2 - a[0])**2 + (y[i]**2 - a[1])**2)**1/2 - a[2])
    return d

x = input().split() # x vector
y = input().split() # y vector
a0 = [0, 0, 0]  # initial guess: a, b, r = 0
xopt = optimize.fmin(f1, a0, xtol=1e-8, args=(x, y,))

print(xopt)

'''
input:
7.7 4.6 10.3 8.4 13.2 5.2 3.5 3.4 6.1 12.2 3.1 12.5 13 4.8 4.5 3.1 9 7.2 6.6 3.4 12.8 12.2 4.1 6.1 7.7 5.3 12.7 10.8 12.5 8.6 12.4 12.9 7.7 13 11.3 12.3 13.2 3.2 10.3 12.8 9.2 10.1 8.7 5.7 11.9 10.1 11.5 4 3.2 13.4 10.5 5 12.4 7.5 13 13.2 3.3 8.8 11.2 10.7 10.5 8.1 9.3 12.3 11.6 4.5 4.5 7.6 9.7 10.9 3.3 12.2 12.9 12.8 12.8 11.6 9.2 13.3 12.2 4.4 8.9 12.1 6 7.7 8.5 12.9 11.5 13.4 3.4 3 12.9 8.4 5 9.9 4.4 12.5 11.5 7.8 3.8 13.1 7.8 10 10.4 8.9 3.9 9.7 4.9 2.6 8.9 8.4 3.4 8.1 12 12 12.6 10.6 2.9 6.6 3.3 3.4 5.8 12.1 12.8 12.7 6.2 11.1 3.2 10.6 5.7 9.1 11 4.8 7.3 9.7 12.5 9.5 4.4 10.9 11.6 12.5 11 10.7 7.1 12 12.2 11.2 12.8 9.8 12.3 9.1 12.3 12.8 4.6 3.7 12 7.9 8.3 3.3 12.9 3.7 13 12 4.2 10.4 13.3 12.2 6.6 10.4 3.8 13.1 9.6 9.2 6.3 3.4 10.1 3.6 6.4 3.5 3.2 10.9 7 11.2 7.9 12.1 9.4 8.1 12.5 8.9 10.2 12.4 
2.6 4.1 4 12.7 7.1 3.4 7.2 7 3.9 4.9 7.7 10.6 9.4 3.6 4.6 5.6 13.4 3 3.6 6.4 7.9 5.5 5.7 3.8 12.6 3.4 5.2 12.5 6.2 13.3 5.8 8.6 3.5 6.4 12.2 10.2 8.4 6.5 4 10 2.9 3.2 12.6 3.8 10.6 12.3 12 4.7 6.8 8.6 11.8 3.9 5.8 13.1 8.5 7.9 6 3.3 12.1 12.7 3.4 12.8 2.7 6.4 11 3.9 3.9 13.3 12.8 3.6 5.5 5.4 6.1 7.6 6.4 4.6 3.3 7 6.1 4.6 12.9 5.5 3.3 2.7 12.6 9.8 4.2 7.4 7.7 7.6 5.7 12.6 3.9 12.9 4.9 8.4 12.1 13.3 4.9 8.9 12.7 13.1 12.3 12.9 4.6 12.2 4.6 7.3 13 12.6 6.2 12.7 5.3 5.7 9.9 4.3 7.8 3.3 5.4 6.6 4 5.8 9.4 8 3.6 4.5 7.9 4.3 3.6 13 12.6 3.6 3.4 13.2 10.7 2.9 4.2 4.2 11.6 5 4.4 12.1 2.6 11 5.9 12 5.4 13 4.6 12.4 4.8 9.2 5 6.3 5 3.2 3.2 6 10.4 4.7 8.4 11.2 4.2 12.5 6.7 9.9 3.5 12.2 5.5 7.4 3.5 12.9 3.8 5.4 3.2 6.2 2.8 6.2 6.9 3.6 3.3 12.2 3.1 4.9 12.3 2.7 8.6 13.4 3.4 9.6 
'''
